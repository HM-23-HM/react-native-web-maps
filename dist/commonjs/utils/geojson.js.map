{"version":3,"names":["makeOverlays","features","points","filter","f","geometry","type","map","feature","makeCoordinates","coordinates","makeOverlay","reduce","flatten","overlay","lines","multipolygons","polygons","concat","exports","prev","curr","length","holes","slice","makePoint","c","latitude","longitude","makeLine","l","g","p","doesOverlayContainProperty","property","properties","getRgbaFromHex","hex","alpha","_hex$match","r","b","match","x","parseInt","getColor","props","colorType","overrideColorProp","hasOwnProperty","color","opacityProperty","getStrokeWidth","strokeWidth"],"sources":["geojson.js"],"sourcesContent":["/**\n * This file is taken from `react-native-maps`\n * I guess this has been tested by the creators lol\n * Tried to type it but it's a pain\n * TODO: Type this bs\n * https://github.com/react-native-maps/react-native-maps/blob/master/src/Geojson.js\n */\nexport const makeOverlays = (features) => {\n  const points = features\n    .filter(\n      (f) =>\n        f.geometry &&\n        (f.geometry.type === 'Point' || f.geometry.type === 'MultiPoint')\n    )\n    .map((feature) =>\n      makeCoordinates(feature).map((coordinates) =>\n        makeOverlay(coordinates, feature)\n      )\n    )\n    .reduce(flatten, [])\n    .map((overlay) => ({ ...overlay, type: 'point' }));\n  const lines = features\n    .filter(\n      (f) =>\n        f.geometry &&\n        (f.geometry.type === 'LineString' ||\n          f.geometry.type === 'MultiLineString')\n    )\n    .map((feature) =>\n      makeCoordinates(feature).map((coordinates) =>\n        makeOverlay(coordinates, feature)\n      )\n    )\n    .reduce(flatten, [])\n    .map((overlay) => ({ ...overlay, type: 'polyline' }));\n  const multipolygons = features\n    .filter((f) => f.geometry && f.geometry.type === 'MultiPolygon')\n    .map((feature) =>\n      makeCoordinates(feature).map((coordinates) =>\n        makeOverlay(coordinates, feature)\n      )\n    )\n    .reduce(flatten, []);\n  const polygons = features\n    .filter((f) => f.geometry && f.geometry.type === 'Polygon')\n    .map((feature) => makeOverlay(makeCoordinates(feature), feature))\n    .reduce(flatten, [])\n    .concat(multipolygons)\n    .map((overlay) => ({ ...overlay, type: 'polygon' }));\n  return points.concat(lines).concat(polygons);\n};\nexport const flatten = (prev, curr) => prev.concat(curr);\nexport const makeOverlay = (coordinates, feature) => {\n  let overlay = {\n    feature,\n  };\n  if (\n    feature.geometry.type === 'Polygon' ||\n    feature.geometry.type === 'MultiPolygon'\n  ) {\n    overlay.coordinates = coordinates[0];\n    if (coordinates.length > 1) {\n      overlay.holes = coordinates.slice(1);\n    }\n  } else {\n    overlay.coordinates = coordinates;\n  }\n  return overlay;\n};\nexport const makePoint = (c) => ({\n  latitude: c[1],\n  longitude: c[0],\n});\nexport const makeLine = (l) => l.map(makePoint);\nexport const makeCoordinates = (feature) => {\n  const g = feature.geometry;\n  if (g.type === 'Point') {\n    return [makePoint(g.coordinates)];\n  } else if (g.type === 'MultiPoint') {\n    return g.coordinates.map(makePoint);\n  } else if (g.type === 'LineString') {\n    return [makeLine(g.coordinates)];\n  } else if (g.type === 'MultiLineString') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'Polygon') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'MultiPolygon') {\n    return g.coordinates.map((p) => p.map(makeLine));\n  } else {\n    return [];\n  }\n};\nexport const doesOverlayContainProperty = (overlay, property) => {\n  // Geojson may have 0 for the opacity when intention is to not specify the\n  // opacity. Therefore, we evaluate the truthiness of the propery where 0\n  // would return false.\n  return (\n    overlay.feature &&\n    overlay.feature.properties &&\n    overlay.feature.properties[property]\n  );\n};\nexport const getRgbaFromHex = (hex, alpha = 1) => {\n  const [r, g, b] = hex.match(/\\w\\w/g)?.map((x) => parseInt(x, 16)) || [\n    0, 0, 0,\n  ];\n  return `rgba(${r},${g},${b},${alpha})`;\n};\nexport const getColor = (props, overlay, colorType, overrideColorProp) => {\n  if (props.hasOwnProperty(overrideColorProp)) {\n    return props[overrideColorProp];\n  }\n  if (doesOverlayContainProperty(overlay, colorType)) {\n    let color = overlay.feature.properties[colorType];\n    const opacityProperty = colorType + '-opacity';\n    if (\n      doesOverlayContainProperty(overlay, opacityProperty) &&\n      color[0] === '#'\n    ) {\n      color = getRgbaFromHex(\n        color,\n        overlay.feature.properties[opacityProperty]\n      );\n    }\n    return color;\n  }\n  return;\n};\nexport const getStrokeWidth = (props, overlay) => {\n  if (props.hasOwnProperty('strokeWidth')) {\n    return props.strokeWidth;\n  }\n  if (doesOverlayContainProperty(overlay, 'stroke-width')) {\n    return overlay.feature.properties['stroke-width'];\n  }\n  return;\n};\n"],"mappings":"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","ignoreList":[]}